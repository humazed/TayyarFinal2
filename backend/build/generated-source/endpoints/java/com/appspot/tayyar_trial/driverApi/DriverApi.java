/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-09-26 19:19:48 UTC)
 * on 2017-10-15 at 01:45:45 UTC 
 * Modify at your own risk.
 */

package com.appspot.tayyar_trial.driverApi;

/**
 * Service definition for DriverApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DriverApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class DriverApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.23.0 of the driverApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://tayyar-trial.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "driverApi/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public DriverApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  DriverApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "createDriver".
   *
   * This request holds the parameters needed by the driverApi server.  After setting any optional
   * parameters, call the {@link CreateDriver#execute()} method to invoke the remote operation.
   *
   * @param name
   * @param email
   * @param phone
   * @param vehicle
   * @param imageURL
   * @return the request
   */
  public CreateDriver createDriver(java.lang.String name, java.lang.String email, java.lang.String phone, java.lang.String vehicle, java.lang.String imageURL) throws java.io.IOException {
    CreateDriver result = new CreateDriver(name, email, phone, vehicle, imageURL);
    initialize(result);
    return result;
  }

  public class CreateDriver extends DriverApiRequest<com.appspot.tayyar_trial.driverApi.model.Driver> {

    private static final String REST_PATH = "createDriver/{name}/{email}/{phone}/{vehicle}/{imageURL}";

    /**
     * Create a request for the method "createDriver".
     *
     * This request holds the parameters needed by the the driverApi server.  After setting any
     * optional parameters, call the {@link CreateDriver#execute()} method to invoke the remote
     * operation. <p> {@link
     * CreateDriver#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param name
     * @param email
     * @param phone
     * @param vehicle
     * @param imageURL
     * @since 1.13
     */
    protected CreateDriver(java.lang.String name, java.lang.String email, java.lang.String phone, java.lang.String vehicle, java.lang.String imageURL) {
      super(DriverApi.this, "POST", REST_PATH, null, com.appspot.tayyar_trial.driverApi.model.Driver.class);
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.phone = com.google.api.client.util.Preconditions.checkNotNull(phone, "Required parameter phone must be specified.");
      this.vehicle = com.google.api.client.util.Preconditions.checkNotNull(vehicle, "Required parameter vehicle must be specified.");
      this.imageURL = com.google.api.client.util.Preconditions.checkNotNull(imageURL, "Required parameter imageURL must be specified.");
    }

    @Override
    public CreateDriver setAlt(java.lang.String alt) {
      return (CreateDriver) super.setAlt(alt);
    }

    @Override
    public CreateDriver setFields(java.lang.String fields) {
      return (CreateDriver) super.setFields(fields);
    }

    @Override
    public CreateDriver setKey(java.lang.String key) {
      return (CreateDriver) super.setKey(key);
    }

    @Override
    public CreateDriver setOauthToken(java.lang.String oauthToken) {
      return (CreateDriver) super.setOauthToken(oauthToken);
    }

    @Override
    public CreateDriver setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CreateDriver) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CreateDriver setQuotaUser(java.lang.String quotaUser) {
      return (CreateDriver) super.setQuotaUser(quotaUser);
    }

    @Override
    public CreateDriver setUserIp(java.lang.String userIp) {
      return (CreateDriver) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public CreateDriver setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public CreateDriver setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String phone;

    /**

     */
    public java.lang.String getPhone() {
      return phone;
    }

    public CreateDriver setPhone(java.lang.String phone) {
      this.phone = phone;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String vehicle;

    /**

     */
    public java.lang.String getVehicle() {
      return vehicle;
    }

    public CreateDriver setVehicle(java.lang.String vehicle) {
      this.vehicle = vehicle;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String imageURL;

    /**

     */
    public java.lang.String getImageURL() {
      return imageURL;
    }

    public CreateDriver setImageURL(java.lang.String imageURL) {
      this.imageURL = imageURL;
      return this;
    }

    @Override
    public CreateDriver set(String parameterName, Object value) {
      return (CreateDriver) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "driverAcceptsDeliveryRequest".
   *
   * This request holds the parameters needed by the driverApi server.  After setting any optional
   * parameters, call the {@link DriverAcceptsDeliveryRequest#execute()} method to invoke the remote
   * operation.
   *
   * @param deliveryRequestId
   * @param driverId
   * @return the request
   */
  public DriverAcceptsDeliveryRequest driverAcceptsDeliveryRequest(java.lang.Long deliveryRequestId, java.lang.Long driverId) throws java.io.IOException {
    DriverAcceptsDeliveryRequest result = new DriverAcceptsDeliveryRequest(deliveryRequestId, driverId);
    initialize(result);
    return result;
  }

  public class DriverAcceptsDeliveryRequest extends DriverApiRequest<com.appspot.tayyar_trial.driverApi.model.DeliveryRequest> {

    private static final String REST_PATH = "driverAcceptsDeliveryRequest/{deliveryRequestId}/{driverId}";

    /**
     * Create a request for the method "driverAcceptsDeliveryRequest".
     *
     * This request holds the parameters needed by the the driverApi server.  After setting any
     * optional parameters, call the {@link DriverAcceptsDeliveryRequest#execute()} method to invoke
     * the remote operation. <p> {@link DriverAcceptsDeliveryRequest#initialize(com.google.api.client.
     * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param deliveryRequestId
     * @param driverId
     * @since 1.13
     */
    protected DriverAcceptsDeliveryRequest(java.lang.Long deliveryRequestId, java.lang.Long driverId) {
      super(DriverApi.this, "POST", REST_PATH, null, com.appspot.tayyar_trial.driverApi.model.DeliveryRequest.class);
      this.deliveryRequestId = com.google.api.client.util.Preconditions.checkNotNull(deliveryRequestId, "Required parameter deliveryRequestId must be specified.");
      this.driverId = com.google.api.client.util.Preconditions.checkNotNull(driverId, "Required parameter driverId must be specified.");
    }

    @Override
    public DriverAcceptsDeliveryRequest setAlt(java.lang.String alt) {
      return (DriverAcceptsDeliveryRequest) super.setAlt(alt);
    }

    @Override
    public DriverAcceptsDeliveryRequest setFields(java.lang.String fields) {
      return (DriverAcceptsDeliveryRequest) super.setFields(fields);
    }

    @Override
    public DriverAcceptsDeliveryRequest setKey(java.lang.String key) {
      return (DriverAcceptsDeliveryRequest) super.setKey(key);
    }

    @Override
    public DriverAcceptsDeliveryRequest setOauthToken(java.lang.String oauthToken) {
      return (DriverAcceptsDeliveryRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public DriverAcceptsDeliveryRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DriverAcceptsDeliveryRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DriverAcceptsDeliveryRequest setQuotaUser(java.lang.String quotaUser) {
      return (DriverAcceptsDeliveryRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public DriverAcceptsDeliveryRequest setUserIp(java.lang.String userIp) {
      return (DriverAcceptsDeliveryRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long deliveryRequestId;

    /**

     */
    public java.lang.Long getDeliveryRequestId() {
      return deliveryRequestId;
    }

    public DriverAcceptsDeliveryRequest setDeliveryRequestId(java.lang.Long deliveryRequestId) {
      this.deliveryRequestId = deliveryRequestId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long driverId;

    /**

     */
    public java.lang.Long getDriverId() {
      return driverId;
    }

    public DriverAcceptsDeliveryRequest setDriverId(java.lang.Long driverId) {
      this.driverId = driverId;
      return this;
    }

    @Override
    public DriverAcceptsDeliveryRequest set(String parameterName, Object value) {
      return (DriverAcceptsDeliveryRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "driverConfirmsPickUp".
   *
   * This request holds the parameters needed by the driverApi server.  After setting any optional
   * parameters, call the {@link DriverConfirmsPickUp#execute()} method to invoke the remote
   * operation.
   *
   * @param deliveryRequestId
   * @return the request
   */
  public DriverConfirmsPickUp driverConfirmsPickUp(java.lang.Long deliveryRequestId) throws java.io.IOException {
    DriverConfirmsPickUp result = new DriverConfirmsPickUp(deliveryRequestId);
    initialize(result);
    return result;
  }

  public class DriverConfirmsPickUp extends DriverApiRequest<com.appspot.tayyar_trial.driverApi.model.DeliveryRequest> {

    private static final String REST_PATH = "driverConfirmsPickUp/{deliveryRequestId}";

    /**
     * Create a request for the method "driverConfirmsPickUp".
     *
     * This request holds the parameters needed by the the driverApi server.  After setting any
     * optional parameters, call the {@link DriverConfirmsPickUp#execute()} method to invoke the
     * remote operation. <p> {@link DriverConfirmsPickUp#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param deliveryRequestId
     * @since 1.13
     */
    protected DriverConfirmsPickUp(java.lang.Long deliveryRequestId) {
      super(DriverApi.this, "POST", REST_PATH, null, com.appspot.tayyar_trial.driverApi.model.DeliveryRequest.class);
      this.deliveryRequestId = com.google.api.client.util.Preconditions.checkNotNull(deliveryRequestId, "Required parameter deliveryRequestId must be specified.");
    }

    @Override
    public DriverConfirmsPickUp setAlt(java.lang.String alt) {
      return (DriverConfirmsPickUp) super.setAlt(alt);
    }

    @Override
    public DriverConfirmsPickUp setFields(java.lang.String fields) {
      return (DriverConfirmsPickUp) super.setFields(fields);
    }

    @Override
    public DriverConfirmsPickUp setKey(java.lang.String key) {
      return (DriverConfirmsPickUp) super.setKey(key);
    }

    @Override
    public DriverConfirmsPickUp setOauthToken(java.lang.String oauthToken) {
      return (DriverConfirmsPickUp) super.setOauthToken(oauthToken);
    }

    @Override
    public DriverConfirmsPickUp setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DriverConfirmsPickUp) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DriverConfirmsPickUp setQuotaUser(java.lang.String quotaUser) {
      return (DriverConfirmsPickUp) super.setQuotaUser(quotaUser);
    }

    @Override
    public DriverConfirmsPickUp setUserIp(java.lang.String userIp) {
      return (DriverConfirmsPickUp) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long deliveryRequestId;

    /**

     */
    public java.lang.Long getDeliveryRequestId() {
      return deliveryRequestId;
    }

    public DriverConfirmsPickUp setDeliveryRequestId(java.lang.Long deliveryRequestId) {
      this.deliveryRequestId = deliveryRequestId;
      return this;
    }

    @Override
    public DriverConfirmsPickUp set(String parameterName, Object value) {
      return (DriverConfirmsPickUp) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "driverDeliveredOrder".
   *
   * This request holds the parameters needed by the driverApi server.  After setting any optional
   * parameters, call the {@link DriverDeliveredOrder#execute()} method to invoke the remote
   * operation.
   *
   * @param deliveryRequestId
   * @return the request
   */
  public DriverDeliveredOrder driverDeliveredOrder(java.lang.Long deliveryRequestId) throws java.io.IOException {
    DriverDeliveredOrder result = new DriverDeliveredOrder(deliveryRequestId);
    initialize(result);
    return result;
  }

  public class DriverDeliveredOrder extends DriverApiRequest<com.appspot.tayyar_trial.driverApi.model.DeliveryRequest> {

    private static final String REST_PATH = "driverDeliveredOrder/{deliveryRequestId}";

    /**
     * Create a request for the method "driverDeliveredOrder".
     *
     * This request holds the parameters needed by the the driverApi server.  After setting any
     * optional parameters, call the {@link DriverDeliveredOrder#execute()} method to invoke the
     * remote operation. <p> {@link DriverDeliveredOrder#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param deliveryRequestId
     * @since 1.13
     */
    protected DriverDeliveredOrder(java.lang.Long deliveryRequestId) {
      super(DriverApi.this, "POST", REST_PATH, null, com.appspot.tayyar_trial.driverApi.model.DeliveryRequest.class);
      this.deliveryRequestId = com.google.api.client.util.Preconditions.checkNotNull(deliveryRequestId, "Required parameter deliveryRequestId must be specified.");
    }

    @Override
    public DriverDeliveredOrder setAlt(java.lang.String alt) {
      return (DriverDeliveredOrder) super.setAlt(alt);
    }

    @Override
    public DriverDeliveredOrder setFields(java.lang.String fields) {
      return (DriverDeliveredOrder) super.setFields(fields);
    }

    @Override
    public DriverDeliveredOrder setKey(java.lang.String key) {
      return (DriverDeliveredOrder) super.setKey(key);
    }

    @Override
    public DriverDeliveredOrder setOauthToken(java.lang.String oauthToken) {
      return (DriverDeliveredOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public DriverDeliveredOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DriverDeliveredOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DriverDeliveredOrder setQuotaUser(java.lang.String quotaUser) {
      return (DriverDeliveredOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public DriverDeliveredOrder setUserIp(java.lang.String userIp) {
      return (DriverDeliveredOrder) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long deliveryRequestId;

    /**

     */
    public java.lang.Long getDeliveryRequestId() {
      return deliveryRequestId;
    }

    public DriverDeliveredOrder setDeliveryRequestId(java.lang.Long deliveryRequestId) {
      this.deliveryRequestId = deliveryRequestId;
      return this;
    }

    @Override
    public DriverDeliveredOrder set(String parameterName, Object value) {
      return (DriverDeliveredOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "driverRefuseDeliveryRequest".
   *
   * This request holds the parameters needed by the driverApi server.  After setting any optional
   * parameters, call the {@link DriverRefuseDeliveryRequest#execute()} method to invoke the remote
   * operation.
   *
   * @param deliveryRequestId
   * @param driverId
   * @return the request
   */
  public DriverRefuseDeliveryRequest driverRefuseDeliveryRequest(java.lang.Long deliveryRequestId, java.lang.Long driverId) throws java.io.IOException {
    DriverRefuseDeliveryRequest result = new DriverRefuseDeliveryRequest(deliveryRequestId, driverId);
    initialize(result);
    return result;
  }

  public class DriverRefuseDeliveryRequest extends DriverApiRequest<com.appspot.tayyar_trial.driverApi.model.DeliveryRequest> {

    private static final String REST_PATH = "driverRefuseDeliveryRequest/{deliveryRequestId}/{driverId}";

    /**
     * Create a request for the method "driverRefuseDeliveryRequest".
     *
     * This request holds the parameters needed by the the driverApi server.  After setting any
     * optional parameters, call the {@link DriverRefuseDeliveryRequest#execute()} method to invoke
     * the remote operation. <p> {@link DriverRefuseDeliveryRequest#initialize(com.google.api.client.g
     * oogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param deliveryRequestId
     * @param driverId
     * @since 1.13
     */
    protected DriverRefuseDeliveryRequest(java.lang.Long deliveryRequestId, java.lang.Long driverId) {
      super(DriverApi.this, "POST", REST_PATH, null, com.appspot.tayyar_trial.driverApi.model.DeliveryRequest.class);
      this.deliveryRequestId = com.google.api.client.util.Preconditions.checkNotNull(deliveryRequestId, "Required parameter deliveryRequestId must be specified.");
      this.driverId = com.google.api.client.util.Preconditions.checkNotNull(driverId, "Required parameter driverId must be specified.");
    }

    @Override
    public DriverRefuseDeliveryRequest setAlt(java.lang.String alt) {
      return (DriverRefuseDeliveryRequest) super.setAlt(alt);
    }

    @Override
    public DriverRefuseDeliveryRequest setFields(java.lang.String fields) {
      return (DriverRefuseDeliveryRequest) super.setFields(fields);
    }

    @Override
    public DriverRefuseDeliveryRequest setKey(java.lang.String key) {
      return (DriverRefuseDeliveryRequest) super.setKey(key);
    }

    @Override
    public DriverRefuseDeliveryRequest setOauthToken(java.lang.String oauthToken) {
      return (DriverRefuseDeliveryRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public DriverRefuseDeliveryRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DriverRefuseDeliveryRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DriverRefuseDeliveryRequest setQuotaUser(java.lang.String quotaUser) {
      return (DriverRefuseDeliveryRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public DriverRefuseDeliveryRequest setUserIp(java.lang.String userIp) {
      return (DriverRefuseDeliveryRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long deliveryRequestId;

    /**

     */
    public java.lang.Long getDeliveryRequestId() {
      return deliveryRequestId;
    }

    public DriverRefuseDeliveryRequest setDeliveryRequestId(java.lang.Long deliveryRequestId) {
      this.deliveryRequestId = deliveryRequestId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long driverId;

    /**

     */
    public java.lang.Long getDriverId() {
      return driverId;
    }

    public DriverRefuseDeliveryRequest setDriverId(java.lang.Long driverId) {
      this.driverId = driverId;
      return this;
    }

    @Override
    public DriverRefuseDeliveryRequest set(String parameterName, Object value) {
      return (DriverRefuseDeliveryRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "driverRefusesDelivery".
   *
   * This request holds the parameters needed by the driverApi server.  After setting any optional
   * parameters, call the {@link DriverRefusesDelivery#execute()} method to invoke the remote
   * operation.
   *
   * @param deliveryRequestID
   * @param driverID
   * @return the request
   */
  public DriverRefusesDelivery driverRefusesDelivery(java.lang.Long deliveryRequestID, java.lang.Long driverID) throws java.io.IOException {
    DriverRefusesDelivery result = new DriverRefusesDelivery(deliveryRequestID, driverID);
    initialize(result);
    return result;
  }

  public class DriverRefusesDelivery extends DriverApiRequest<com.appspot.tayyar_trial.driverApi.model.DeliveryRequest> {

    private static final String REST_PATH = "driverRefusesDelivery/{deliveryRequestID}/{driverID}";

    /**
     * Create a request for the method "driverRefusesDelivery".
     *
     * This request holds the parameters needed by the the driverApi server.  After setting any
     * optional parameters, call the {@link DriverRefusesDelivery#execute()} method to invoke the
     * remote operation. <p> {@link DriverRefusesDelivery#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param deliveryRequestID
     * @param driverID
     * @since 1.13
     */
    protected DriverRefusesDelivery(java.lang.Long deliveryRequestID, java.lang.Long driverID) {
      super(DriverApi.this, "POST", REST_PATH, null, com.appspot.tayyar_trial.driverApi.model.DeliveryRequest.class);
      this.deliveryRequestID = com.google.api.client.util.Preconditions.checkNotNull(deliveryRequestID, "Required parameter deliveryRequestID must be specified.");
      this.driverID = com.google.api.client.util.Preconditions.checkNotNull(driverID, "Required parameter driverID must be specified.");
    }

    @Override
    public DriverRefusesDelivery setAlt(java.lang.String alt) {
      return (DriverRefusesDelivery) super.setAlt(alt);
    }

    @Override
    public DriverRefusesDelivery setFields(java.lang.String fields) {
      return (DriverRefusesDelivery) super.setFields(fields);
    }

    @Override
    public DriverRefusesDelivery setKey(java.lang.String key) {
      return (DriverRefusesDelivery) super.setKey(key);
    }

    @Override
    public DriverRefusesDelivery setOauthToken(java.lang.String oauthToken) {
      return (DriverRefusesDelivery) super.setOauthToken(oauthToken);
    }

    @Override
    public DriverRefusesDelivery setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DriverRefusesDelivery) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DriverRefusesDelivery setQuotaUser(java.lang.String quotaUser) {
      return (DriverRefusesDelivery) super.setQuotaUser(quotaUser);
    }

    @Override
    public DriverRefusesDelivery setUserIp(java.lang.String userIp) {
      return (DriverRefusesDelivery) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long deliveryRequestID;

    /**

     */
    public java.lang.Long getDeliveryRequestID() {
      return deliveryRequestID;
    }

    public DriverRefusesDelivery setDeliveryRequestID(java.lang.Long deliveryRequestID) {
      this.deliveryRequestID = deliveryRequestID;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long driverID;

    /**

     */
    public java.lang.Long getDriverID() {
      return driverID;
    }

    public DriverRefusesDelivery setDriverID(java.lang.Long driverID) {
      this.driverID = driverID;
      return this;
    }

    @Override
    public DriverRefusesDelivery set(String parameterName, Object value) {
      return (DriverRefusesDelivery) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link DriverApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link DriverApi}. */
    @Override
    public DriverApi build() {
      return new DriverApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DriverApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDriverApiRequestInitializer(
        DriverApiRequestInitializer driverapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(driverapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
